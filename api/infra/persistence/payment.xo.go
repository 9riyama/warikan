// Package persistence contains the types for schema 'public'.
package persistence

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Payment represents a row from 'public.payments'.
type Payment struct {
	ID          int            `json:"id"`           // id
	UserID      int            `json:"user_id"`      // user_id
	CategoryID  int            `json:"category_id"`  // category_id
	PayerID     int            `json:"payer_id"`     // payer_id
	Description sql.NullString `json:"description"`  // description
	PaymentDate time.Time      `json:"payment_date"` // payment_date
	Payment     int            `json:"payment"`      // payment
	CreatedAt   time.Time      `json:"created_at"`   // created_at
	UpdatedAt   time.Time      `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Payment exists in the database.
func (p *Payment) Exists() bool {
	return p._exists
}

// Deleted provides information if the Payment has been deleted from the database.
func (p *Payment) Deleted() bool {
	return p._deleted
}

// Insert inserts the Payment to the database.
func (p *Payment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.payments (` +
		`user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt)
	err = db.QueryRow(sqlstr, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Payment in the database.
func (p *Payment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payments SET (` +
		`user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE id = $9`

	// run query
	XOLog(sqlstr, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt, p.ID)
	_, err = db.Exec(sqlstr, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt, p.ID)
	return err
}

// Save saves the Payment to the database.
func (p *Payment) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Payment.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Payment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payments (` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_id, EXCLUDED.category_id, EXCLUDED.payer_id, EXCLUDED.description, EXCLUDED.payment_date, EXCLUDED.payment, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt)
	_, err = db.Exec(sqlstr, p.ID, p.UserID, p.CategoryID, p.PayerID, p.Description, p.PaymentDate, p.Payment, p.CreatedAt, p.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Payment from the database.
func (p *Payment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payments WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// Category returns the Category associated with the Payment's CategoryID (category_id).
//
// Generated from foreign key 'payments_category_id_fkey'.
func (p *Payment) Category(db XODB) (*Category, error) {
	return CategoryByID(db, p.CategoryID)
}

// Payer returns the Payer associated with the Payment's PayerID (payer_id).
//
// Generated from foreign key 'payments_payer_id_fkey'.
func (p *Payment) Payer(db XODB) (*Payer, error) {
	return PayerByID(db, p.PayerID)
}

// User returns the User associated with the Payment's UserID (user_id).
//
// Generated from foreign key 'payments_user_id_fkey'.
func (p *Payment) User(db XODB) (*User, error) {
	return UserByID(db, p.UserID)
}

// PaymentsByCategoryID retrieves a row from 'public.payments' as a Payment.
//
// Generated from index 'payments_category_id_idx'.
func PaymentsByCategoryID(db XODB, categoryID int) ([]*Payment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at ` +
		`FROM public.payments ` +
		`WHERE category_id = $1`

	// run query
	XOLog(sqlstr, categoryID)
	q, err := db.Query(sqlstr, categoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Payment{}
	for q.Next() {
		p := Payment{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.UserID, &p.CategoryID, &p.PayerID, &p.Description, &p.PaymentDate, &p.Payment, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PaymentsByPayerID retrieves a row from 'public.payments' as a Payment.
//
// Generated from index 'payments_payer_id_idx'.
func PaymentsByPayerID(db XODB, payerID int) ([]*Payment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at ` +
		`FROM public.payments ` +
		`WHERE payer_id = $1`

	// run query
	XOLog(sqlstr, payerID)
	q, err := db.Query(sqlstr, payerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Payment{}
	for q.Next() {
		p := Payment{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.UserID, &p.CategoryID, &p.PayerID, &p.Description, &p.PaymentDate, &p.Payment, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PaymentByID retrieves a row from 'public.payments' as a Payment.
//
// Generated from index 'payments_pkey'.
func PaymentByID(db XODB, id int) (*Payment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at ` +
		`FROM public.payments ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Payment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.UserID, &p.CategoryID, &p.PayerID, &p.Description, &p.PaymentDate, &p.Payment, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PaymentsByUserID retrieves a row from 'public.payments' as a Payment.
//
// Generated from index 'payments_user_id_idx'.
func PaymentsByUserID(db XODB, userID int) ([]*Payment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, category_id, payer_id, description, payment_date, payment, created_at, updated_at ` +
		`FROM public.payments ` +
		`WHERE user_id = $1`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Payment{}
	for q.Next() {
		p := Payment{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.UserID, &p.CategoryID, &p.PayerID, &p.Description, &p.PaymentDate, &p.Payment, &p.CreatedAt, &p.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

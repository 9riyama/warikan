// Package persistence contains the types for schema 'public'.
package persistence

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Payer represents a row from 'public.payers'.
type Payer struct {
	ID        int       `json:"id"`         // id
	Name      string    `json:"name"`       // name
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Payer exists in the database.
func (p *Payer) Exists() bool {
	return p._exists
}

// Deleted provides information if the Payer has been deleted from the database.
func (p *Payer) Deleted() bool {
	return p._deleted
}

// Insert inserts the Payer to the database.
func (p *Payer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.payers (` +
		`name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.Name, p.CreatedAt, p.UpdatedAt)
	err = db.QueryRow(sqlstr, p.Name, p.CreatedAt, p.UpdatedAt).Scan(&p.ID)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Payer in the database.
func (p *Payer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.payers SET (` +
		`name, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, p.Name, p.CreatedAt, p.UpdatedAt, p.ID)
	_, err = db.Exec(sqlstr, p.Name, p.CreatedAt, p.UpdatedAt, p.ID)
	return err
}

// Save saves the Payer to the database.
func (p *Payer) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Upsert performs an upsert for Payer.
//
// NOTE: PostgreSQL 9.5+ only
func (p *Payer) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.payers (` +
		`id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Name, p.CreatedAt, p.UpdatedAt)
	_, err = db.Exec(sqlstr, p.ID, p.Name, p.CreatedAt, p.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Delete deletes the Payer from the database.
func (p *Payer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.payers WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PayerByID retrieves a row from 'public.payers' as a Payer.
//
// Generated from index 'payers_pkey'.
func PayerByID(db XODB, id int) (*Payer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.payers ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Payer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// Package persistence contains the types for schema 'public'.
package persistence

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Category represents a row from 'public.categories'.
type Category struct {
	ID        int       `json:"id"`         // id
	Name      string    `json:"name"`       // name
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Category exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted provides information if the Category has been deleted from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the Category to the database.
func (c *Category) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.categories (` +
		`name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt)
	err = db.QueryRow(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Category in the database.
func (c *Category) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.categories SET (` +
		`name, created_at, updated_at` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt, c.ID)
	_, err = db.Exec(sqlstr, c.Name, c.CreatedAt, c.UpdatedAt, c.ID)
	return err
}

// Save saves the Category to the database.
func (c *Category) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Category.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Category) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.categories (` +
		`id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, created_at, updated_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.created_at, EXCLUDED.updated_at` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Name, c.CreatedAt, c.UpdatedAt)
	_, err = db.Exec(sqlstr, c.ID, c.Name, c.CreatedAt, c.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Category from the database.
func (c *Category) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.categories WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CategoryByID retrieves a row from 'public.categories' as a Category.
//
// Generated from index 'categories_pkey'.
func CategoryByID(db XODB, id int) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.categories ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Name, &c.CreatedAt, &c.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// Package persistence contains the types for schema 'public'.
package persistence

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/lib/pq"
)

// Migration represents a row from 'public.migrations'.
type Migration struct {
	ID        string      `json:"id"`         // id
	AppliedAt pq.NullTime `json:"applied_at"` // applied_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Migration exists in the database.
func (m *Migration) Exists() bool {
	return m._exists
}

// Deleted provides information if the Migration has been deleted from the database.
func (m *Migration) Deleted() bool {
	return m._deleted
}

// Insert inserts the Migration to the database.
func (m *Migration) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.AppliedAt)
	err = db.QueryRow(sqlstr, m.ID, m.AppliedAt).Scan(&m.ID)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Migration in the database.
func (m *Migration) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.migrations SET (` +
		`applied_at` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, m.AppliedAt, m.ID)
	_, err = db.Exec(sqlstr, m.AppliedAt, m.ID)
	return err
}

// Save saves the Migration to the database.
func (m *Migration) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Migration.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Migration) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, applied_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.applied_at` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.AppliedAt)
	_, err = db.Exec(sqlstr, m.ID, m.AppliedAt)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Migration from the database.
func (m *Migration) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.migrations WHERE id = $1`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MigrationByID retrieves a row from 'public.migrations' as a Migration.
//
// Generated from index 'migrations_pkey'.
func MigrationByID(db XODB, id string) (*Migration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, applied_at ` +
		`FROM public.migrations ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	m := Migration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.AppliedAt)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
